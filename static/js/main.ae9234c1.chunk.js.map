{"version":3,"sources":["serviceWorker.ts","state/tasks-reducer.tsx","state/todolists-reducer.tsx","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","tasks","state","action","type","stateCopy","todolistId","filteredTasks","filter","t","id","taskId","newTask","v1","title","isDone","newTasks","todolistTasks","task","find","map","todolists","tl","todolist","store","createStore","AddItemForm","React","memo","props","useState","setTitle","error","setError","addItem","trim","TextField","value","variant","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","ControlPoint","EditableSpan","console","log","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","key","className","Checkbox","event","onChangeHandler","checked","onChangeTitleHandler","onClickHandler","Delete","Todolist","addTask","useCallback","changeTodolistTitle","newTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","allTodolistTasks","tasksForTodolist","newValue","changeTaskTitle","newIsDoneValue","changeTaskStatus","removeTask","removeTodolist","Button","AppWithRedux","useSelector","tasksObj","dispatch","useDispatch","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTaskTitleAC","removeTodolistAC","addTodolist","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","item","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCmBFC,EAA+B,GCR/BA,EAAiC,G,QCtB/BC,EAAcC,YAAgB,CAChCC,MFgCwB,WAAgE,IAA/DC,EAA8D,uDAAtDJ,EAAcK,EAAwC,uCACvF,OAAQA,EAAOC,MACX,IAAK,cACD,IAAMC,EAAS,eAAOH,GAChBD,EAAQC,EAAMC,EAAOG,YACrBC,EAAgBN,EAAMO,QAAO,SAAAC,GAAC,OAAIA,EAAEC,KAAOP,EAAOQ,UAExD,OADAN,EAAUF,EAAOG,YAAcC,EACxBF,EAEX,IAAK,WACD,IAAMA,EAAS,eAAOH,GAChBD,EAAQI,EAAUF,EAAOG,YACzBM,EAAU,CAACF,GAAIG,cAAMC,MAAOX,EAAOW,MAAOC,QAAQ,GAClDC,EAAQ,CAAIJ,GAAJ,mBAAgBX,IAE9B,OADAI,EAAUF,EAAOG,YAAcU,EACxBX,EAGX,IAAK,qBACD,IAAIY,EAAgBf,EAAMC,EAAOG,YAC7BY,EAAOD,EAAcE,MAAK,SAAAV,GAAC,OAAIA,EAAEC,KAAOP,EAAOQ,UAInD,OAHIO,IACAA,EAAKH,OAASZ,EAAOY,QAElB,eACAb,EADP,eAEKC,EAAOG,WAAaJ,EAAMC,EAAOG,YAC7Bc,KAAI,SAAAF,GACD,OAAIA,EAAKR,KAAOP,EAAOQ,OACZ,eAAIO,EAAX,CAAiBH,OAAQZ,EAAOY,SAEzBG,OAO3B,IAAK,oBACD,IAAID,EAAgBf,EAAMC,EAAOG,YAC7BY,EAAOD,EAAcE,MAAK,SAAAV,GAAC,OAAIA,EAAEC,KAAOP,EAAOQ,UAInD,OAHIO,IACAA,EAAKJ,MAAQX,EAAOW,OAEjB,eACAZ,EADP,eAEKC,EAAOG,WAAaJ,EAAMC,EAAOG,YAC7Bc,KAAI,SAAAF,GACD,OAAIA,EAAKR,KAAOP,EAAOQ,OACZ,eAAIO,EAAX,CAAiBJ,MAAOX,EAAOW,QAExBI,OAK3B,IAAK,eACD,IAAMb,EAAS,eAAOH,GAEtB,OADAG,EAAUF,EAAOG,YAAc,GACxBD,EAEX,IAAK,kBACD,IAAMA,EAAS,eAAOH,GAEtB,cADOG,EAAUF,EAAOO,IACjBL,EAEX,QACI,OAAOH,IElGfmB,UD6B4B,WAAmE,IAAlEnB,EAAiE,uDAA3DJ,EAAcK,EAA6C,uCAC9F,OAAQA,EAAOC,MACX,IAAK,kBACD,OAAOF,EAAMM,QAAO,SAAAc,GAAE,OAAIA,EAAGZ,IAAMP,EAAOO,MAE9C,IAAK,eACD,MAAM,GAAN,mBAAWR,GAAX,CAAkB,CACdQ,GAAIP,EAAOG,WACXQ,MAAOX,EAAOW,MACdN,OAAQ,SAGhB,IAAK,wBACD,IAAMe,EAAWrB,EAAMiB,MAAK,SAAAG,GAAE,OAAIA,EAAGZ,KAAOP,EAAOO,MAInD,OAHIa,IACAA,EAAST,MAAQX,EAAOW,OAErB,YAAIZ,GAEf,IAAK,yBACD,IAAMqB,EAAWrB,EAAMiB,MAAK,SAAAG,GAAE,OAAIA,EAAGZ,KAAOP,EAAOO,MAInD,OAHIa,IACAA,EAASf,OAASL,EAAOK,QAEtB,YAAIN,GAGf,QACI,OAAOA,MCtDNsB,EAAQC,YAAY1B,GAMjCL,OAAO8B,MAAQA,E,6CCkCAE,EA3CaC,IAAMC,MAAK,SAACC,GAAgC,IAAD,EAC3CC,mBAAS,IADkC,mBAC9DhB,EAD8D,KACvDiB,EADuD,OAE3CD,mBAAwB,MAFmB,mBAE9DE,EAF8D,KAEvDC,EAFuD,KAK7DC,EAAU,WACS,KAAjBpB,EAAMqB,QACNN,EAAMK,QAAQpB,EAAMqB,QACpBJ,EAAS,KAETE,EAAS,uBAgBjB,OAAO,6BAEH,kBAACG,EAAA,EAAD,CAAWC,MAAOvB,EACPwB,QAAS,WACTC,MAAO,aACPC,SAjBS,SAACC,GACrBV,EAASU,EAAEC,cAAcL,QAiBdM,WAbW,SAACF,GACR,OAAVT,GAAgBC,EAAS,MACX,KAAfQ,EAAEG,UACFV,KAWOF,QAASA,EACTa,WAAYb,IAEvB,kBAACc,EAAA,EAAD,CAAYC,QAASb,EAASc,MAAO,WACjC,kBAACC,EAAA,EAAD,WCtCCC,EAAavB,IAAMC,MAAK,SAACC,GAClCsB,QAAQC,IAAI,uBADsD,MAGvCtB,oBAAS,GAH8B,mBAG9DuB,EAH8D,KAGrDC,EAHqD,OAI7CxB,mBAAS,IAJoC,mBAI9DhB,EAJ8D,KAIxDiB,EAJwD,KAgBlE,OAAOsB,EACD,kBAACjB,EAAA,EAAD,CAAWC,MAAOvB,EAAO0B,SAHJ,SAACC,GAAD,OAAmCV,EAASU,EAAEC,cAAcL,QAGxBkB,OAPvC,WACpBD,GAAY,GACZzB,EAAMW,SAAS1B,IAKsE0C,WAAS,IAC5F,0BAAMC,cAZY,WACpBH,GAAY,GACZvB,EAASF,EAAMf,SAU2Be,EAAMf,U,2BCb3C4C,EAAO/B,IAAMC,MAAK,SAACC,GAAyB,IAAD,EAE1BA,EAAMX,KAA3BR,EAF+C,EAE/CA,GAAII,EAF2C,EAE3CA,MAAOC,EAFoC,EAEpCA,OAKhB,OACI,yBAAK4C,IAAK9B,EAAMX,KAAKR,GAAIkD,UAAW7C,EAAS,UAAY,IACzD,kBAAC8C,EAAA,EAAD,CAAUrB,SANQ,SAACsB,GAAD,OAAyCjC,EAAMkC,gBAAgBrD,EAAGoD,EAAMpB,cAAcsB,UAMnEA,QAASjD,IAE9C,kBAACmC,EAAD,CAAcpC,MAAOA,EACP0B,SAPS,SAAC1B,GAAD,OAAkBe,EAAMoC,qBAAqBvD,EAAGI,MAQvE,kBAACgC,EAAA,EAAD,CAAYC,QATK,kBAAMlB,EAAMqC,eAAexD,KAUxC,kBAACyD,EAAA,EAAD,WCCCC,EAAWzC,IAAMC,MAAK,SAACC,GAAsB,IAAD,EAG7BC,mBAAS,IAHoB,gCAI7BA,mBAAwB,OAJK,mBAM/CuC,GAN+C,UAMrCC,uBAAY,SAACxD,GACzBe,EAAMwC,QAAQvD,EAAOe,EAAMnB,MAC5B,CAACmB,KAGE0C,EAAsBD,uBAAY,SAACE,GACrC3C,EAAM0C,oBAAoB1C,EAAMnB,GAAI8D,KACrC,CAAC3C,EAAM0C,oBAAqB1C,EAAMnB,KAG/B+D,EAAoBH,uBAAY,kBAAMzC,EAAM6C,aAAa,MAAO7C,EAAMnB,MAAK,CAACmB,EAAM6C,aAAc7C,EAAMnB,KACtGiE,EAAuBL,uBAAY,kBAAMzC,EAAM6C,aAAa,SAAU7C,EAAMnB,MAAK,CAACmB,EAAM6C,aAAc7C,EAAMnB,KAC5GkE,EAA0BN,uBAAY,kBAAMzC,EAAM6C,aAAa,YAAa7C,EAAMnB,MAAK,CAACmB,EAAM6C,aAAc7C,EAAMnB,KAKpHmE,EAAmBhD,EAAM5B,MACzB6E,EAAmBD,EAGF,WAAjBhD,EAAMrB,SACNsE,EAAmBD,EAAiBrE,QAAO,SAAAC,GAAC,OAAiB,IAAbA,EAAEM,WAGjC,cAAjBc,EAAMrB,SACNsE,EAAmBD,EAAiBrE,QAAO,SAAAC,GAAC,OAAiB,IAAbA,EAAEM,WAItD,IAAMkD,EAAuBK,uBAAY,SAAC3D,EAAgBoE,GACtDlD,EAAMmD,gBAAgBrE,EAAQoE,EAAUlD,EAAMnB,MAChD,CAACmB,EAAMnB,GAAGmB,EAAMmD,kBAEZjB,EAAkBO,uBAAY,SAAC3D,EAAgBsE,GACjDpD,EAAMqD,iBAAiBvE,EAAQsE,EAAgBpD,EAAMnB,MACvD,CAACmB,EAAMnB,GAAImB,EAAMqD,mBAEbhB,EAAiBI,uBAAY,SAAC3D,GAAD,OAAoBkB,EAAMsD,WAAWxE,EAAQkB,EAAMnB,MAAI,CAACmB,EAAMnB,GAAGmB,EAAMsD,aAG1G,OAAO,6BACH,4BAAI,kBAACjC,EAAD,CAAcpC,MAAOe,EAAMf,MAAO0B,SAAU+B,IAC5C,kBAACzB,EAAA,EAAD,CAAYC,QA9BG,WACnBlB,EAAMuD,eAAevD,EAAMnB,MA8BnB,kBAACyD,EAAA,EAAD,QAGR,kBAAC,EAAD,CAAajC,QAASmC,IACtB,8BAEIS,EAAiB1D,KAAI,SAAAX,GAEjB,OAAO,kBAACiD,EAAD,CACHxC,KAAMT,EACNwD,qBAAsBA,EACtBF,gBAAiBA,EACjBG,eAAgBA,OAI5B,6BACI,kBAACmB,EAAA,EAAD,CAAQ/C,QAA0B,QAAjBT,EAAMrB,OAAmB,YAAc,OAChDuC,QAAS0B,GADjB,OAGA,kBAACY,EAAA,EAAD,CAAQrC,MAAO,UAAWV,QAA0B,WAAjBT,EAAMrB,OAAsB,YAAc,OACrEuC,QAAS4B,GADjB,UAGA,kBAACU,EAAA,EAAD,CAAQrC,MAAO,YAAaV,QAA0B,cAAjBT,EAAMrB,OAAyB,YAAc,OAC1EuC,QAAS6B,GADjB,kB,8DC4BGU,MAlGf,WAEI,IAAMjE,EAAYkE,aAAmD,SAAArF,GAAK,OAAIA,EAAMmB,aAC9EmE,EAAWD,aAA8C,SAAArF,GAAK,OAAIA,EAAMD,SACxEwF,EAAWC,cAGXP,EAAab,uBAAY,SAAC5D,EAAYJ,GACxC,IAAIH,EPwEgB,SAACQ,EAAgBL,GACzC,MAAO,CAACF,KAAM,cAAeE,aAAYK,UOzExBgF,CAAajF,EAAIJ,GAC9BmF,EAAStF,KACV,CAACsF,IAGEf,EAAeJ,uBAAY,SAACjC,EAAyB/B,GACvDmF,ENmCG,CAACrF,KAAM,yBAA0BM,GMnCJJ,ENmCYE,OMnCA6B,MAC7C,CAACoD,IAEEpB,EAAUC,uBAAY,SAACxD,EAAeR,GACxC,IAAIH,EPiEa,SAACW,EAAeR,GACrC,MAAO,CAACF,KAAM,WAAYU,QAAOR,cOlEhBsF,CAAU9E,EAAOR,GAC9BmF,EAAStF,KAMV,CAACsF,IAEEI,EAAevB,uBAAY,SAAC3D,EAAgBI,EAAiBT,GAC/DmF,EP0D0B,SAAC9E,EAAgBI,EAAiBT,GAChE,MAAO,CAACF,KAAM,qBAAsBO,SAAQI,SAAQT,cO3DvCwF,CAAmBnF,EAAQI,EAAQT,MAC7C,IAEG0E,EAAkBV,uBAAY,SAAC3D,EAAgB6D,EAAkBlE,GACnEmF,EPyDyB,SAAC9E,EAAgBG,EAAeR,GAC7D,MAAO,CAACF,KAAM,oBAAqBO,SAAQG,QAAOR,cO1DrCyF,CAAkBpF,EAAQ6D,EAAUlE,MAE9C,CAACmF,IAEEL,EAAiBd,uBAAY,SAAChE,GAChC,IAAIH,ENEoB,SAACG,GAC7B,MAAO,CAACF,KAAM,kBAAmBM,GAAIJ,GMHpB0F,CAAiB1F,GAC9BmF,EAAStF,KACV,CAACsF,IAEElB,EAAsBD,uBAAY,SAAChE,EAAoBkE,GACzDiB,ENIG,CAACrF,KAAM,wBAAyBM,GMJJJ,ENIYQ,MMJA0D,MAC5C,CAACiB,IAEEQ,EAAc3B,uBAAY,SAACxD,GAC7B,IAAIX,ENJiB,SAACW,GAC1B,MAAO,CAACV,KAAM,eAAgBU,QAAOR,WAAYO,eMGhCqF,CAAcpF,GAC3B2E,EAAStF,KACV,CAACsF,IAEJ,OACI,yBAAK7B,UAAU,OACX,kBAACuC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACvD,EAAA,EAAD,CAAYwD,KAAK,QAAQtD,MAAM,UAAUuD,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYnE,QAAQ,MAApB,QAGA,kBAAC+C,EAAA,EAAD,CAAQrC,MAAM,WAAd,WAGR,kBAAC0D,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,SAC7B,kBAAC,EAAD,CAAa7E,QAAS+D,KAE1B,kBAACW,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,GAEzB3F,EAAUD,KAAI,SAAAE,GAGd,OAAM,kBAACsF,EAAA,EAAD,CAAMK,MAAI,GACZ,kBAACC,EAAA,EAAD,CAAOJ,MAAO,CAACC,QAAS,SACpB,kBAAC3C,EAAD,CACIT,IAAKrC,EAAGZ,GACRA,GAAIY,EAAGZ,GACPI,MAAOQ,EAAGR,MACVb,MAAOuF,EAASlE,EAAGZ,IACnByE,WAAYA,EACZT,aAAcA,EACdL,QAASA,EACTa,iBAAkBW,EAClBb,gBAAiBA,EACjBxE,OAAQc,EAAGd,OACX4E,eAAgBA,EAChBb,oBAAqBA,aC7GjD4C,IAASC,OAED,kBAAC,IAAD,CAAU5F,MAAOA,GACb,kBAAC,EAAD,OAGR6F,SAASC,eAAe,ST6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7F,GACLmB,QAAQnB,MAAMA,EAAM8F,c","file":"static/js/main.ae9234c1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FilterValuesType, TasksStateType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType;\r\n\r\nlet initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = state[action.todolistId];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state};\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTask = {id: v1(), title: action.title, isDone: false};\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let task = todolistTasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(task => {\r\n                        if (task.id === action.taskId) {\r\n                            return {...task, isDone: action.isDone}\r\n                        } else {\r\n                            return task;\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n\r\n\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let task = todolistTasks.find(t => t.id === action.taskId);\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(task => {\r\n                        if (task.id === action.taskId) {\r\n                            return {...task, title: action.title}\r\n                        } else {\r\n                            return task;\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            stateCopy[action.todolistId] = [];\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.id];\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', todolistId, taskId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype ActionType = {\r\n    type: string\r\n    [key: string]: any\r\n}\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nlet initialState:Array<TodolistType>=[]\r\n\r\ntype ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\n\r\nexport const todolistsReducer = (state=initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [...state, {\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: id, filter: filter}\r\n}\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\nimport {userReducer} from \"./user-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {ControlPoint, TextFields} from \"@material-ui/icons\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm  = React.memo((props: AddItemFormPropsType)=> {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError('Title is required ')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if ( error !== null) setError(null)\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n\r\n        <TextField value={title}\r\n                   variant={\"outlined\"}\r\n                   label={'Type value'}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   helperText={error}\r\n        />\r\n        <IconButton onClick={addItem} color={'primary'}>\r\n            <ControlPoint/>\r\n        </IconButton>\r\n    </div>\r\n\r\n})\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange:(newValue:string)=>void\r\n}\r\n\r\nexport const EditableSpan=React.memo((props: EditableSpanPropsType) =>{\r\n    console.log('EditableSpan called')\r\n\r\n    let[editMode,setEditMode] =useState(false);\r\n    let[title,setTitle] =useState(\"\");\r\n\r\n    const activateEditMode =()=>{\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode =()=>{\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const onChangeTitleHandler=(e:ChangeEvent<HTMLInputElement>)=>setTitle(e.currentTarget.value);\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={onChangeTitleHandler} onBlur={activateViewMode} autoFocus/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    onChangeTitleHandler: (taskId:string,title: string) => void\r\n    onChangeHandler: (taskId:string,checked: boolean) => void\r\n    onClickHandler: (taskId:string) => void\r\n}\r\n\r\nexport const Task = React.memo((props:TaskPropsType) => {\r\n\r\n    let {id, title, isDone} = props.task\r\n    let onChangeHandler = (event:ChangeEvent<HTMLInputElement>) => props.onChangeHandler(id,event.currentTarget.checked)\r\n    let onClickHandler = () => props.onClickHandler(id)\r\n    let onChangeTitleHandler = (title:string) => props.onChangeTitleHandler(id,title)\r\n\r\n    return (\r\n        <div key={props.task.id} className={isDone ? 'is-done' : \"\"}>\r\n        <Checkbox onChange={onChangeHandler} checked={isDone}/>\r\n\r\n        <EditableSpan title={title}\r\n                      onChange={onChangeTitleHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Check, CheckBox, Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props])\r\n\r\n\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle);\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id]);\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n\r\n    let allTodolistTasks = props.tasks\r\n    let tasksForTodolist = allTodolistTasks;\r\n\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n    }\r\n\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n    }\r\n\r\n\r\n    const onChangeTitleHandler = useCallback((taskId: string, newValue: string) => {\r\n        props.changeTaskTitle(taskId, newValue, props.id)\r\n    },[props.id,props.changeTaskTitle])\r\n\r\n    const onChangeHandler = useCallback((taskId: string, newIsDoneValue: boolean) => {\r\n        props.changeTaskStatus(taskId, newIsDoneValue, props.id)\r\n    },[props.id, props.changeTaskStatus])\r\n\r\n    const onClickHandler = useCallback((taskId: string) => props.removeTask(taskId, props.id),[props.id,props.removeTask])\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div></div>\r\n        {\r\n            tasksForTodolist.map(t => {\r\n\r\n                return <Task\r\n                    task={t}\r\n                    onChangeTitleHandler={onChangeTitleHandler}\r\n                    onChangeHandler={onChangeHandler}\r\n                    onClickHandler={onClickHandler}\r\n                />\r\n            })\r\n        }\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? 'contained' : \"text\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </Button>\r\n            <Button color={\"primary\"} variant={props.filter === 'active' ? 'contained' : \"text\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button color={\"secondary\"} variant={props.filter === 'completed' ? 'contained' : \"text\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n\r\n})\r\n\r\n","import React, {useCallback, useDebugValue, useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from \"./state/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasksObj = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        let action = removeTaskAC(id, todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        let action = addTaskAC(title, todolistId)\r\n        dispatch(action)\r\n        /* let task = {id: v1(), title: title, isDone: false};\r\n         let tasks = tasksObj[todolistId];\r\n         let newTasks = [task, ...tasks];\r\n         tasksObj[todolistId] = newTasks;\r\n         setTasks({...tasksObj});*/\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todolistId))\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, newTitle, todolistId))\r\n\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n        let action = removeTodolistAC(todolistId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((todolistId: string, newTitle: string) => {\r\n        dispatch(changeTodolistTitleAC(todolistId, newTitle))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        let action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color='inherit'>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                todolists.map(tl=>{\r\n\r\n\r\n                return<Grid item>\r\n                    <Paper style={{padding: \"10px\"}}>\r\n                        <Todolist\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksObj[tl.id]}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            filter={tl.filter}\r\n                            removeTodolist={removeTodolist}\r\n                            changeTodolistTitle={changeTodolistTitle}\r\n                        />\r\n                    </Paper>\r\n                </Grid>\r\n                })\r\n                }\r\n            </Grid>\r\n        </Container>\r\n\r\n</div>)\r\n}\r\n\r\nexport default AppWithRedux;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport AppWithRedux from \"./AppWithRedux\";\n\nReactDOM.render(\n\n        <Provider store={store}>\n            <AppWithRedux/>\n        </Provider>,\n\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}